  <%= render :partial => "/report/header" %>
    <div class="inner">
      <img class="avatar" src="/images/devices/CPU-Mem.png" alt="avatar" align="right"/>

      <h3><%= I18n.t(:sample_number) %> : <b><%= @host.stats_memory.counter %></b></h3>
      <h3><%= I18n.t(:first_sample_date) %> : <b><%= @host.stats_memory.created_at %></b></h3>


      <fieldset class="singleRow">
	<legend class="legendFieldset"><%= I18n.t(:last_statement).capitalize %></legend>
	<h4>mem used : <b><%=  @host.stats_memory.mem_used.round(2) %></b></h4>
      </fieldset> 

      <fieldset class="singleRow">
	<legend class="legendFieldset"><%= I18n.t(:average).capitalize %></legend>
	<h4>average mem used : <b><%= @host.stats_memory.average_mem_used.round(2) %></b></h4>
      </fieldset> 

      <fieldset class="singleRow">
	<legend class="legendFieldset"><%= I18n.t(:highest).capitalize %></legend>
	<h4>max mem used : <b><%= @host.stats_memory.max_mem_used.round(2) %></b></h4>
      </fieldset> 

      <div class="clear"></div>

      <h4>Graph period : three days ago before last stats (<b><%= @host.stats_memory.updated_at %></b>)</h4>

      <h4>Mb</h4> 

      <% cache("report/memory/#{@host.uuid}") do %>
      <p id="mem_overviewLegend" style="margin-left:10px"></p>  
      <div id="mem_placeholder" style="width:600px;height:300px"></div>
      <div id="mem_overview" style="margin-left:50px;margin-top:20px;width:400px;height:50px"></div> 

      <p id="percent_overviewLegend" style="margin-left:10px"></p>  
      <div id="percent_placeholder" style="width:600px;height:300px"></div>
      <div id="percent_overview" style="margin-left:50px;margin-top:20px;width:400px;height:50px"></div> 


      <h1>SWAP : <%= @host.stats_memory.swap_total %> total MB</h1> 
      <p id="swap_overviewLegend" style="margin-left:10px"></p>  
      <div id="swap_placeholder" style="width:600px;height:300px"></div>
      <div id="swap_overview" style="margin-left:50px;margin-top:20px;width:400px;height:50px"></div> 

      <p id="page_overviewLegend" style="margin-left:10px"></p>  
      <div id="page_placeholder" style="width:600px;height:300px"></div>
      <div id="page_overview" style="margin-left:50px;margin-top:20px;width:400px;height:50px"></div> 
 

	<script id="source" language="javascript" type="text/javascript">
	  $(function () {
	  var data = [
	  {
	  label: "used",
	  data: <%= @mem_used.to_json -%>
	  },
	  {
	  label: "free",
	  data: <%= @mem_free.to_json -%>
	  },
	  {
	  label: "actual free",
	  data: <%= @mem_actual_free.to_json -%>
	  },
	  {
	  label: "actual used",
	  data: <%= @mem_actual_used.to_json -%>
	  }
	  ];


	  // first correct the timestamps - they are recorded as the daily
	  // midnights in UTC+0100, but Flot always displays dates in UTC
	  // so we have to add one hour to hit the midnights in the plot
	  // for (var i = 0; i < d.length; ++i) d[i][0] += 60 * 60 * 1000;
 
				 // helper for returning the weekends in a period
				 function weekendAreas(axes) {
				 var markings = [];
				 var d = new Date(axes.xaxis.min);
				 // go to the first Saturday
				 d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
				 d.setUTCSeconds(0);
				 d.setUTCMinutes(0);
				 d.setUTCHours(0);
				 var i = d.getTime();
				 do {
				 // when we don't set yaxis, the rectangle automatically
				 // extends to infinity upwards and downwards
				 markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
				 i += 7 * 24 * 60 * 60 * 1000;
				 } while (i < axes.xaxis.max);
					      
					      return markings;
					      }
    

					      var options = {
					      series: {
					      lines: { show: true },
					      points: { show: false }
					      },
					      legend: { show: true, noColumns: 4, container: $("#mem_overviewLegend") },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };


					      var options_zoom = {
					      series: {
					      lines: { show: true },
					      points: { show: true }
					      },
					      legend: { show: false },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };


    
					      var plot = $.plot($("#mem_placeholder"), data, options);
					      
					      var overview = $.plot($("#mem_overview"), data, {
					      series: {
					      lines: { show: true, lineWidth: 1 },
					      shadowSize: 0
					      },
					      legend: { show: false },
					      xaxis: { mode: "time" },
					      yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
					      selection: { mode: "xy" }
					      });
					      
					      // now connect the two
					      
					      $("#mem_placeholder").bind("plotselected", function (event, ranges) {
					      // do the zooming
					      plot = $.plot($("#mem_placeholder"), data,
					      $.extend(true, {}, options_zoom, {
					      xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
					      yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
					      }));
					      
					      // don't fire event on the overview to prevent eternal loop
					      overview.setSelection(ranges, true);
					      });
					      
					      $("#mem_overview").bind("plotselected", function (event, ranges) {
					      plot.setSelection(ranges);
					      });
					      });
					      </script>



	<script id="source" language="javascript" type="text/javascript">
	  $(function () {
	  var data = [
	  {
	  label: "actual free percent",
	  data: <%= @mem_actual_free_percent.to_json -%>
	  },
	  {
	  label: "actual used percent",
	  data: <%= @mem_actual_used_percent.to_json -%>
	  }
	  ];


	  // first correct the timestamps - they are recorded as the daily
	  // midnights in UTC+0100, but Flot always displays dates in UTC
	  // so we have to add one hour to hit the midnights in the plot
	  // for (var i = 0; i < d.length; ++i) d[i][0] += 60 * 60 * 1000;
 
				 // helper for returning the weekends in a period
				 function weekendAreas(axes) {
				 var markings = [];
				 var d = new Date(axes.xaxis.min);
				 // go to the first Saturday
				 d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
				 d.setUTCSeconds(0);
				 d.setUTCMinutes(0);
				 d.setUTCHours(0);
				 var i = d.getTime();
				 do {
				 // when we don't set yaxis, the rectangle automatically
				 // extends to infinity upwards and downwards
				 markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
				 i += 7 * 24 * 60 * 60 * 1000;
				 } while (i < axes.xaxis.max);
					      
					      return markings;
					      }
    

					      var options = {
					      series: {
					      lines: { show: true },
					      points: { show: false }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };

					      var options_zoom = {
					      series: {
					      lines: { show: true },
					      points: { show: true }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };


    
					      var plot = $.plot($("#percent_placeholder"), data, options);
					      
					      var overview = $.plot($("#percent_overview"), data, {
					      series: {
					      lines: { show: true, lineWidth: 1 },
					      shadowSize: 0
					      },
					      legend: { show: false },
					      xaxis: { mode: "time" },
					      yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
					      selection: { mode: "xy" }
					      });
					      
					      // now connect the two
					      
					      $("#percent_placeholder").bind("plotselected", function (event, ranges) {
					      // do the zooming
					      plot = $.plot($("#percent_placeholder"), data,
					      $.extend(true, {}, options_zoom, {
					      xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
					      yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
					      }));
					      
					      // don't fire event on the overview to prevent eternal loop
					      overview.setSelection(ranges, true);
					      });
					      
					      $("#percent_overview").bind("plotselected", function (event, ranges) {
					      plot.setSelection(ranges);
					      });
					      });
					      </script>




	<script id="source" language="javascript" type="text/javascript">
	  $(function () {
	  var data = [
	  {
	  label: "used",
	  data: <%= @swap_used.to_json -%>
	  },
	  {
	  label: "free",
	  data: <%= @swap_free.to_json -%>
	  }
	  ];


	  // first correct the timestamps - they are recorded as the daily
	  // midnights in UTC+0100, but Flot always displays dates in UTC
	  // so we have to add one hour to hit the midnights in the plot
	  // for (var i = 0; i < d.length; ++i) d[i][0] += 60 * 60 * 1000;
 
				 // helper for returning the weekends in a period
				 function weekendAreas(axes) {
				 var markings = [];
				 var d = new Date(axes.xaxis.min);
				 // go to the first Saturday
				 d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
				 d.setUTCSeconds(0);
				 d.setUTCMinutes(0);
				 d.setUTCHours(0);
				 var i = d.getTime();
				 do {
				 // when we don't set yaxis, the rectangle automatically
				 // extends to infinity upwards and downwards
				 markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
				 i += 7 * 24 * 60 * 60 * 1000;
				 } while (i < axes.xaxis.max);
					      
					      return markings;
					      }
    

					      var options = {
					      series: {
					      lines: { show: true },
					      points: { show: false }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };

					      var options_zoom = {
					      series: {
					      lines: { show: true },
					      points: { show: true }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };

    
					      var plot = $.plot($("#swap_placeholder"), data, options);
					      
					      var overview = $.plot($("#swap_overview"), data, {
					      series: {
					      lines: { show: true, lineWidth: 1 },
					      shadowSize: 0
					      },
					      legend: { show: false },
					      xaxis: { mode: "time" },
					      yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
					      selection: { mode: "xy" }
					      });
					      
					      // now connect the two
					      
					      $("#swap_placeholder").bind("plotselected", function (event, ranges) {
					      // do the zooming
					      plot = $.plot($("#swap_placeholder"), data,
					      $.extend(true, {}, options_zoom, {
					      xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
					      yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
					      }));
					      
					      // don't fire event on the overview to prevent eternal loop
					      overview.setSelection(ranges, true);
					      });
					      
					      $("#swap_overview").bind("plotselected", function (event, ranges) {
					      plot.setSelection(ranges);
					      });
					      });
</script>




	<script id="source" language="javascript" type="text/javascript">
	  $(function () {
	  var data = [
	  {
	  label: "page in",
	  data: <%= @swap_page_in.to_json -%>
	  },
	  {
	  label: "page out",
	  data: <%= @swap_page_out.to_json -%>
	  }
	  ];


	  // first correct the timestamps - they are recorded as the daily
	  // midnights in UTC+0100, but Flot always displays dates in UTC
	  // so we have to add one hour to hit the midnights in the plot
	  // for (var i = 0; i < d.length; ++i) d[i][0] += 60 * 60 * 1000;
 
				 // helper for returning the weekends in a period
				 function weekendAreas(axes) {
				 var markings = [];
				 var d = new Date(axes.xaxis.min);
				 // go to the first Saturday
				 d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
				 d.setUTCSeconds(0);
				 d.setUTCMinutes(0);
				 d.setUTCHours(0);
				 var i = d.getTime();
				 do {
				 // when we don't set yaxis, the rectangle automatically
				 // extends to infinity upwards and downwards
				 markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
				 i += 7 * 24 * 60 * 60 * 1000;
				 } while (i < axes.xaxis.max);
					      
					      return markings;
					      }
    

					      var options = {
					      series: {
					      lines: { show: true },
					      points: { show: false }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };

					      var options_zoom = {
					      series: {
					      lines: { show: true },
					      points: { show: true }
					      },
					      legend: { noColumns: 3 },
					      xaxis: { mode: "time" },
					      selection: { mode: "xy" },
					      grid: { markings: weekendAreas }
					      };


    
					      var plot = $.plot($("#page_placeholder"), data, options);
					      
					      var overview = $.plot($("#page_overview"), data, {
					      series: {
					      lines: { show: true, lineWidth: 1 },
					      shadowSize: 0
					      },
					      legend: { show: false },
					      xaxis: { mode: "time" },
					      yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
					      selection: { mode: "xy" }
					      });
					      
					      // now connect the two
					      
					      $("#page_placeholder").bind("plotselected", function (event, ranges) {
					      // do the zooming
					      plot = $.plot($("#page_placeholder"), data,
					      $.extend(true, {}, options_zoom, {
					      xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
					      yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
					      }));
					      
					      // don't fire event on the overview to prevent eternal loop
					      overview.setSelection(ranges, true);
					      });
					      
					      $("#page_overview").bind("plotselected", function (event, ranges) {
					      plot.setSelection(ranges);
					      });
					      });
</script>

<% end %>



    </div>
  </div>
</div>
